{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","baseUrl","notesService","getAll","axios","get","then","response","data","create","newObject","post","update","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","currentNotes","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d448daaf.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important';\n\n    return (\n        <li className='notes'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    );\n};\n\nexport default Note;","const Notification = ({ message }) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    );\n};\n\nexport default Notification;","const Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    };\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n        </div>\n    );\n};\n\nexport default Footer;","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then(response => response.data);\n};\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n};\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data);\n};\n\nconst notesService = {\n    getAll,\n    create,\n    update,\n};\nexport default notesService;","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\nimport noteService from './services/notes';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  // Initialise notes from server\n  useEffect(() => {\n    console.log('effect');\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes);\n      });\n  }, []);\n\n  // Adding a new note\n  const addNote = (event) => {\n    event.preventDefault(); // stop auto page reload\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then(note => {\n        setNotes(notes.concat(note));\n        setNewNote('');\n      })\n      .catch(err => {\n        console.log(err);\n        setErrorMessage(\n          `Sorry, something went wrong!`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n      });\n  };\n\n  // Update new note state\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  // \n  const toggleImportanceOf = (id) => {\n    // Get note by id\n    const note = notes.find(n => n.id === id);\n    // Toggle importance via negation\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        // update state depends on previous: so use callback function\n        setNotes(currentNotes => {\n          // only update note with given id\n          return currentNotes.map(n => n.id === id ? returnedNote : n);\n        });\n      })\n      .catch(err => {\n        // display error message\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        // remove error message after 5 seconds\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        // delete note from DOM since already deleted on server\n        setNotes(currentNotes => {\n          return currentNotes.filter(note => note.id !== id);\n        });\n      });\n  };\n\n  // for filtering notes by importance\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}